#!/usr/bin/env node

'use strict';

const fs = require('fs');
const path = require('path');
const Generator = require('../lib/Generator');

const yargs = require('yargs')
  .usage('Usage: $0 [COMMAND] [OPTIONS]')
  .example('$0 generate -o ../my-csar', 'Generate CSAR')
  .command('generate', 'Generate TOSCA CSAR')
  .command('g', 'Alias for generate')
  .command('merge', 'Merge CSAR specs')
  .command('m', 'Alias for merge')
  .demand(1, 'Valid command required'),
  argv = yargs.argv,
  command = argv._[0];

if (command === 'generate' || command === 'g') {
  const argvGen = yargs.reset()
    .usage('Usage: $0 [COMMAND] [OPTIONS]') // PATH | URL | -
    .example('$0 generate -o ../my-csar', 'Generate CSAR')

    .help('h')
    .alias('h', 'help')

    .describe('s', 'Path to CSAR spec')
    .alias('s', 'spec')
    .string()
    .normalize('s')
    .nargs('s', 1)

    .describe('c', 'Path to working dir used as context')
    .alias('c', 'context')
    .string()
    .normalize('c')
    .nargs('c', 1)
    //.default('c', process.cwd())

    .describe('o', 'Path to output dir or file')
    .alias('o', 'output')
    .string()
    .normalize('o')
    .nargs('o', 1)
    .demand(['output'])

    .describe('p', 'Package generated CSAR as single file')
    .alias('p', 'package')
    .boolean('p')

    .describe('camelize', 'Convert names to camelCase')
    .boolean('camelize')

    .argv;
 
  argvGen.context = argvGen.context || process.cwd();
  argvGen.spec = argvGen.spec || path.join(argvGen.context, 'csarspec.json');

  Generator().generate(fs.readFileSync(argvGen.spec, 'utf8'), {
    workingDir: argvGen.context,
    outputDir: argvGen.output,
    camelize: argvGen.camelize
  }, (err) => {
    if (err) throw err;
    else console.log('done');
  });
} else if (command === 'merge' || command === 'm') {
  console.error('NOT IMPLEMENTED');
} else {
  yargs.showHelp();
}
