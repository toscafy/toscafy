#!/usr/bin/env node

'use strict';

const fs = require('fs');
const path = require('path');
const Generator = require('../lib/Generator');

//TODO use .reset() for command-specific options and sub-commands: g/generate, gp/genpack, m/merge, ...

const argv = require('yargs')
  .usage('Usage: $0 [OPTIONS]') // PATH | URL | -
  .example('$0 -o ../my-csar', 'Generate CSAR')

  .alias('s', 'spec')
  .describe('s', 'Path to CSAR spec')
  .string()
  .normalize('s')
  .nargs('s', 1)

  .alias('c', 'context')
  //.default('c', process.cwd())
  .describe('c', 'Path to working dir used as context')
  .string()
  .normalize('c')
  .nargs('c', 1)

  .alias('o', 'output')
  .describe('o', 'Path to output dir or file')
  .string()
  .normalize('o')
  .nargs('o', 1)
  .demand(['output'])

  .describe('camelize', 'Convert names to camelCase')
  .boolean('camelize')

  //.demand(1)
  .help('h')
  .alias('h', 'help')
  //.epilog('copyright 2016')
  .argv;


argv.context = argv.context || process.cwd();
argv.spec = argv.spec || path.join(argv.context, 'csarspec.json');

Generator().generate(fs.readFileSync(argv.spec, 'utf8'), {
  workingDir: argv.context,
  outputDir: argv.output,
  camelize: argv.camelize
}, (err) => {
  if (err) throw err;
  else console.log('done');
});
